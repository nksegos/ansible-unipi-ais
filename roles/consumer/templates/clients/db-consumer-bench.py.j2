#!/usr/bin/env python3 
from datetime import datetime, timezone
import sys
import pandas as pd
import time
import psycopg2
import argparse

parser = argparse.ArgumentParser("db-consumer-bench.py")
parser.add_argument("-o", "--latency-log-output-file", required=True, help="The path for the file containing the message_id timestamp pairs.")

args = parser.parse_args()

db_host = "{{ database_host }}"
db_port = {{ database_port }}
db_name = "{{ dbname }}_bench"
db_view = "{{ ais_view }}"
db_user = "{{ database_roles['consumer'].name }}"
db_password = "{{ database_roles['consumer'].password }}"

already_received_msg_ids = []

def get_utc_timestamp():
	return datetime.now(timezone.utc)

def fetch_latest_positions():
	sql  = f"SELECT * FROM {db_view} ORDER BY ts DESC"

	try:
		conn = psycopg2.connect(host=db_host, port=db_port, dbname=db_name,
								user=db_user, password=db_password, connect_timeout=3)

		print(f'[{get_utc_timestamp().strftime("%Y-%m-%d %H:%M:%S")} UTC] [INFO] Connected to Database!', flush=True)
		result = pd.read_sql_query(sql, conn)
		conn.close()

	except Exception:
		print(f'[{get_utc_timestamp().strftime("%Y-%m-%d %H:%M:%S")} UTC] [ERROR] Connection to Database Timed Out!', flush=True)
		# if it fails (for some reason) return an empty DataFrame
		result = pd.DataFrame(data=[], columns=['mmsi', 'ts', 'lon', 'lat', 'moving', 'speed', 'heading', 'vessel_name', 'flag', 'vessel_type', 'kinematic_message_id'])

	return result

time_start_msec = int(time.time_ns() // 1_000_000)
time_end_msec = int(time.time_ns() // 1_000_000)

while (time_end_msec - time_start_msec) < 4_800_000:
    df = fetch_latest_positions()
    for idx, row in df.iterrows():
        if row['kinematic_message_id'] not in already_received_msg_ids:
            with open(args.latency_log_output_file, 'a') as latency_log:
                latency_log.write(f"{row['kinematic_message_id']},{time.time_ns() // 1_000_000}\n")
            already_received_msg_ids.append(row['kinematic_message_id'])
    time.sleep(5)
    time_end_msec = int(time.time_ns() // 1_000_000)

sys.exit(0)
