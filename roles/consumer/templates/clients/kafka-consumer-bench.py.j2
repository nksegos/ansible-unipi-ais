#!/usr/bin/env python3 

import time
import sys
from confluent_kafka import Consumer, KafkaException, KafkaError
import json
import argparse

parser = argparse.ArgumentParser("db-consumer-bench.py")
parser.add_argument("-o", "--latency-log-output-file", required=True, help="The path for the file containing the message_id timestamp pairs.")

args = parser.parse_args()

kafka_broker = "{{ kafka_broker_host }}:{{ kafka_broker_port }}"
topics = ["{{ kafka_topics | select('match', '.*static.*') | first }}_bench", "{{ kafka_topics | select('match', '.*kinematic.*') | first }}_bench"]

consumer_conf = {
    'bootstrap.servers': kafka_broker,
    'group.id': 'ais_bench',
    'auto.offset.reset': 'latest',  
}

consumer = Consumer(consumer_conf)
try:
    broker_reply = consumer.list_topics(timeout=5)
    for topic in topics:
        if topic not in broker_reply.topics:
            err = KafkaError(KafkaError._UNKNOWN_TOPIC_OR_PART, f"Topic not found or unavailable: {topic}")
            raise KafkaException(err)
except KafkaException as e:
    print(f'Broker connection failed: {e}. Check config. Exiting...')
    sys.exit(1)
consumer.subscribe(topics)

already_received_msg_ids = []

time_start_msec = int(time.time_ns() // 1_000_000)
time_end_msec = int(time.time_ns() // 1_000_000)


while (time_end_msec - time_start_msec) < 4_800_000:
    msg = consumer.poll(timeout=1.0)
    if msg is None:
        time_end_msec = int(time.time_ns() // 1_000_000)
        continue
    elif msg.error() and msg.error().code() != KafkaError._PARTITION_EOF:
        print(f'Kafka error: {msg.error()}')
        time_end_msec = int(time.time_ns() // 1_000_000)
        continue
    elif msg.error():
        time_end_msec = int(time.time_ns() // 1_000_000)
        continue

    record = json.loads(msg.value().decode('utf-8'))['payload'].get('kinematic_msg_id', None)
    if record is not None:
        if record not in already_received_msg_ids:
            with open(args.latency_log_output_file, 'a') as latency_log:
                latency_log.write(f"{record},{int(time.time_ns() // 1_000_000)}\n")
            already_received_msg_ids.append(record)
    time_end_msec = int(time.time_ns() // 1_000_000)

sys.exit(0)
